package {{encoderPackage}};

import static feign.form.util.CharsetUtil.UTF_8;
import static java.util.Arrays.asList;

import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import feign.RequestTemplate;
import feign.codec.EncodeException;
import feign.codec.Encoder;

import feign.form.ContentProcessor;
import feign.form.ContentType;
import feign.form.MultipartFormContentProcessor;
import feign.form.UrlencodedFormContentProcessor;
import lombok.val;

public class SdkEncoder implements Encoder {

    private static final String CONTENT_TYPE_HEADER;

    private static final Pattern CHARSET_PATTERN;

    static {
        CONTENT_TYPE_HEADER = "Content-Type";
        CHARSET_PATTERN = Pattern.compile("(?<=charset=)([\\w\\-]+)");
    }

    private Encoder delegate;

    private Map<ContentType, ContentProcessor> processors;

    public SdkEncoder () {
        this(new Encoder.Default());
    }

    public SdkEncoder (Encoder delegate) {
        this.delegate = delegate;

        val list = asList(new MultipartFormContentProcessor(delegate),
                new UrlencodedFormContentProcessor());

        processors = new HashMap<>(list.size(), 1.F);
        for (ContentProcessor processor : list) {
            processors.put(processor.getSupportedContentType(), processor);
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void encode (Object object, Type bodyType, RequestTemplate template) throws EncodeException {
        String contentTypeValue = getContentTypeValue(template.headers());
        val contentType = ContentType.of(contentTypeValue);
        if (!processors.containsKey(contentType)) {
            delegate.encode(object, bodyType, template);
            return;
        }

        val charset = getCharset(contentTypeValue);

        ObjectMapper mapper = new ObjectMapper();
        val data = mapper.convertValue(object, new TypeReference<Map<String, Object>>() {});

        try {
            processors.get(contentType).process(template, charset, (Map<String, Object>) data);
        } catch (Exception ex) {
            throw new EncodeException(ex.getMessage());
        }
    }

    @SuppressWarnings("PMD.AvoidBranchingStatementAsLastInLoop")
    private String getContentTypeValue (Map<String, Collection<String>> headers) {
        for (val entry : headers.entrySet()) {
            if (!entry.getKey().equalsIgnoreCase(CONTENT_TYPE_HEADER)) {
                continue;
            }
            for (val contentTypeValue : entry.getValue()) {
                if (contentTypeValue == null) {
                    continue;
                }
                return contentTypeValue;
            }
        }
        return null;
    }

    private Charset getCharset (String contentTypeValue) {
        val matcher = CHARSET_PATTERN.matcher(contentTypeValue);
        return matcher.find()
                ? Charset.forName(matcher.group(1))
                : UTF_8;
    }
}
